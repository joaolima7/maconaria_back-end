// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: posts_queries.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createPost = `-- name: CreatePost :execresult
INSERT INTO posts(id, title, description, date, image, user_id, post_type)
VALUES($1, $2, $3, $4, $5, $6, $7)
`

type CreatePostParams struct {
	ID          uuid.UUID
	Title       string
	Description sql.NullString
	Date        time.Time
	Image       sql.NullString
	UserID      uuid.UUID
	PostType    interface{}
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createPost,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.Date,
		arg.Image,
		arg.UserID,
		arg.PostType,
	)
}

const deletePost = `-- name: DeletePost :exec
DELETE FROM posts WHERE id = $1
`

func (q *Queries) DeletePost(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deletePost, id)
	return err
}

const getAllPosts = `-- name: GetAllPosts :many
SELECT id, title, description, date, image, user_id, post_type FROM posts ORDER BY date DESC
`

func (q *Queries) GetAllPosts(ctx context.Context) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, getAllPosts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Date,
			&i.Image,
			&i.UserID,
			&i.PostType,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllPostsByUserID = `-- name: GetAllPostsByUserID :many
SELECT id, title, description, date, image, user_id, post_type FROM posts WHERE user_id = $1 ORDER BY date DESC
`

func (q *Queries) GetAllPostsByUserID(ctx context.Context, userID uuid.UUID) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, getAllPostsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Date,
			&i.Image,
			&i.UserID,
			&i.PostType,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostByID = `-- name: GetPostByID :one
SELECT id, title, description, date, image, user_id, post_type FROM posts WHERE id = $1
`

func (q *Queries) GetPostByID(ctx context.Context, id uuid.UUID) (Post, error) {
	row := q.db.QueryRowContext(ctx, getPostByID, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Date,
		&i.Image,
		&i.UserID,
		&i.PostType,
	)
	return i, err
}

const updatePost = `-- name: UpdatePost :execresult
UPDATE posts
SET title = $1, description = $2, date = $3, image = $4, post_type = $5
WHERE id = $6
`

type UpdatePostParams struct {
	Title       string
	Description sql.NullString
	Date        time.Time
	Image       sql.NullString
	PostType    interface{}
	ID          uuid.UUID
}

func (q *Queries) UpdatePost(ctx context.Context, arg UpdatePostParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updatePost,
		arg.Title,
		arg.Description,
		arg.Date,
		arg.Image,
		arg.PostType,
		arg.ID,
	)
}
